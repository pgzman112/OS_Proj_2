-------------------------------------------------------------------------------

            +-------------------------+
            | CS 450                  |
            | PROJECT: Page Table Sim |
            | DESIGN DOCUMENT         |
            +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Aidan Roth <rotha@sonoma.edu>
Antone Silveria <silveant@sonoma.edu>
Preston Zimmerman <zimmermp@sonoma.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               PAGE TABLE SIMULATOR
               ====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new `struct',
>> `struct' member, global or static variable, `typedef',
>> enumeration, or classes. Identify the purpose of each
>> in 25 words or less.

struct Page{
  long int V, P, F, U;
  string frameNum;
};
    This struct is used to represent a row of the page table, with V being the
    valid bit, P the permissions bit, F the frame number, and U the recently
    used bit.


---- FUNCTIONS ----

>> A2. List the function prototype and full documentation for each function
>> you have introduced to support Part A of the project.
>> Use the appropriate Google Style Guide for function documentation.
>> For C/C++:
>> google.github.io/styleguide/cppguide.html#Function_Comments
>> For Python:
>> google.github.io/styleguide/pyguide.html#s3.8.3-functions-and-methods

//Takes a hexadecimal string as input and returns its binary equivalent as a string
string hexToBin(string & hex);

//Takes a binary integer as input and returns its hexadecimal equivalent as a string
string binToHex(long int bin);

//Takes a decimal integer as input and returns its binary equivalent as a string
string decToBin(int dec);

//Takes a binary integer as input and returns its decimal equivalent as an integer
int binToDec(long int bin);

//Takes a hex or decimal input that represents a virtual address. This function
// does the full address translation process and implements the clock algorithm.
string addressChange(string & input, int idx, int offset, vector<Page> & PageTable, bool dec, bool clock, int & clockPointer);


---- ALGORITHMS ----

>> A3. Given the following description of a page table:
>>
>> 7 8 32
>> 0 1 0 0
>> 1 1 4 0
>> 1 1 5 1
>> 1 1 2 0
>>
>> Translate the following sequence of address requests using the method
>> described for Part A.
>>
>> 0x05
>> 0x7F
>> 0x3B
>> 0x7F
>> 0x40
>>

DISK
0x5f
0x9b
0x5f
0xa0


>> A4. Give a computation you can use to determine how many rows to read
>> while injesting the page table. It is ok if your program just reads
>> every row, but its possible to compute how many rows there should be.
  We just read in line by line so it didnt really matter. But I think you
  could use the formula:
    (pageSize / physical memory) * (physical memory - virtual memory)


>> A5. Describe your general strategy for managing bit-wise transformations
>> of data, and relevant support functions you used to accomplish this.
  We have multiple supporting functions to perform these tasks.
    string hexToBin(string & hex);
    string binToHex(long int bin);
    string decToBin(int dec);
    int binToDec(long int bin);
  We just looked up fucntions on how to convert between diffrent number
  representations and put them in. We also probably could have found a library
  that does this for us but we did not look for one out of lazyness even though
  it probably would have saved some time.


               CLOCK REPLACEMENT SIMULATOR
               ===========================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new `struct',
>> `struct' member, global or static variable, `typedef',
>> enumeration, or classes. Identify the purpose of each
>> in 25 words or less.

Same as A1

---- FUNCTIONS ----

>> B2. List the function prototype and full documentation for each function
>> you have introduced to support Part A of the project.
>> Again, use the appropriate Google Style Guide for function documentation.

Same as A2. The only difference is the fact that bool clock will be true and
the clockPointer integer will be used to implement the clock algorithm.

---- ALGORITHMS ----

>> B3. Given the following description of a page table:
>>
>> 7 8 32
>> 0 1 0 0
>> 1 1 4 0
>> 1 1 5 1
>> 1 1 2 0
>>
>> Translate the following sequence of address requests using the method
>> described for Part B.
>>
>> 0x05
>> 0x7F
>> 0x3B
>> 0x7F
>> 0x40
>>

PAGEFAULT 0x85
0x5f
PAGEFAULT 0xbb
0x5f
PAGEFAULT 0x80

>> B4. Describe the data structure you used to search through the frames
>> following the clock roation, and how you might improve efficiency
>> if this was an implementation rather than a simulation.

Instead of a data structue, we used a single integer to keep track of the clock
rotation. We think this is very efficient considering its extremely low overhead.


>> B5. Did you need to handle any ambiguous scenarios or corner cases
>> for the Clock algorithm, left unspecified in the algorithm's description?
>> Explain any judgements you used in implementing unclear or
>> unspecified behavior.

  We did not find too many edge cases that needed to be handled throughout our
  testing. This is a fairly straight forward algorithm (at least it was after your
  2nd video going over it). With the way we implemented a clock pointer instead of
  a seperate frame table data structure we did have to add specific logic to make
  sure that we never perform an eviction on something that is not in the frame table.
  for example instead of just checking whether an entry is recently used we must check
  if  recently used == 0 AND that valid bit == 1 (meaning its currently in memory).
  this would not be needed if we had a seperate frame table that only held the current frame
  pages but this would require a lot more overhead I think.




               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?
  ->I think this was a fairly easy project once you understood how to do the translations
  and understood the clock algorithm. But without a strong understanding of those too
  problems I could see this being a lot harder. I cant remember how much time this
  project took specifically but I don't think it was all that much which was kind of nice
  due to some of the things going on in other classes at the moment (ie: building the
  gmp library for watts instead of just importing it... so trivial and time consuming)

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
  -> While the translation bit was important I found implementing the clock
  algorithm to be particularily insightful into how OS's manage memory and even though
  I said I thought this project was relatively easy and quick, I found it to be very insightful, I just
  don't think that the extension was particularily neccessary.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
  -> I have 2 main suggestions for covering this topic in the future. First has to do with address translation
  and how it is explained. Now maybe I missed something in class but from what I grasped there was never just a clear outlining
  of the steps required to perform translation even though it can be easily be broken down into a few steps (which for me at least
  makes it so much easier to understand).
    1) find offset amount and understand that we care about whats left and that is the "index"
    2) convert hex input to binary -> seperate index and offset (set offset asside)
    3) convert index portion of binary to decimal (this is the index you want to look at in the page table)
    4) if valid then take the frame number convert it from decimal to binary than concatinate that and the set asside offset
      -> frame number in binary + offset in binary
    5) convert this long binary number back into hex and boom you're done.
  This doesnt cover everything but I think something like this during class would have made it far easier to grasp
  address translations.
  My 2nd suggestion is that the 2nd video you put out about the clock algorithm was fantastic. I would suggest working that into lecture
  next time around since before that video I was completely lost and after I was able to implement the clock alogorithm with ease.

>> Any other comments?
  No but thank you for not giving us trivial time consuming work unlike other teachers. I don't mind when projects take time as long as
  that time is spent understanding new concepts. It makes me feel like I am actually learning something valuable unlike some classes right now
  which appear to just be giving out busy work.
